---
description: 
globs: 
alwaysApply: false
---
# 다중 도메인 관리 (ADVANCED) - CROSS_PLATFORM_COMPATIBILITY 호환

## 🏗️ 도메인 확장 전략

### 새로운 도메인 추가 절차 (CROSS_PLATFORM_COMPATIBILITY 호환)
```python
# 도메인 추가 시 체크리스트
DOMAIN_ADDITION_CHECKLIST = {
    'preparation': [
        'domain_requirements_analysis',      # 도메인 요구사항 분석
        'architecture_design',              # 아키텍처 설계
        'data_strategy_planning',           # 데이터 전략 계획
        'integration_points_identification' # 통합 지점 식별
    ],
    'implementation': [
        'domain_structure_creation',        # 도메인 구조 생성 (CROSS_PLATFORM_COMPATIBILITY 규칙)
        'core_entities_definition',         # 핵심 엔티티 정의
        'services_implementation',          # 서비스 구현
        'infrastructure_setup',             # 인프라 설정
        'interfaces_development'            # 인터페이스 개발
    ],
    'integration': [
        'shared_modules_extension',         # 공유 모듈 확장
        'communication_channels_setup',     # 통신 채널 설정
        'event_system_integration',         # 이벤트 시스템 통합
        'data_pipeline_connection'          # 데이터 파이프라인 연결
    ],
    'validation': [
        'unit_tests_creation',              # 단위 테스트 생성
        'integration_tests_development',    # 통합 테스트 개발
        'performance_testing',              # 성능 테스트
        'end_to_end_testing'               # 종단간 테스트
    ]
}

def create_new_domain(domain_name: str, feature_name: str):
    """새로운 도메인 기능 생성 (CROSS_PLATFORM_COMPATIBILITY 규칙)"""
    
    from pathlib import Path  # CROSS_PLATFORM_COMPATIBILITY 필수
    
    # 1. 도메인 기능 디렉토리 구조 생성
    domain_path = Path("domains") / domain_name / feature_name
    
    # 필수 파일 목록 (CROSS_PLATFORM_COMPATIBILITY 규칙)
    required_files = [
        '__init__.py',
        'model.py',        # ONNX 모델 클래스
        'run.py',          # 실시간 추론 실행
        'test_model.py',   # 단위 테스트
        'README.md'        # 기능 설명
    ]
    
    # 디렉토리 생성
    domain_path.mkdir(parents=True, exist_ok=True)
    
    # 필수 파일 생성
    for file_name in required_files:
        file_path = domain_path / file_name
        if not file_path.exists():
            if file_name == '__init__.py':
                content = f'"""Domain: {domain_name} - Feature: {feature_name}"""\n'
            elif file_name == 'model.py':
                content = f'''#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
{domain_name} {feature_name} ONNX 모델 클래스.

이 모듈은 {feature_name} 기능의 ONNX 모델 로딩 및 추론 처리를 제공합니다.
"""

import os
import sys
import logging
from pathlib import Path
from typing import Dict, List, Optional, Tuple, Union
import numpy as np
import onnxruntime as ort

# 프로젝트 루트 경로 추가
project_root = Path(__file__).parent.parent.parent
sys.path.append(str(project_root))

from common.logging import get_logger

logger = get_logger(__name__)

class {feature_name.title().replace('_', '')}Model:
    """{feature_name} ONNX 모델 클래스"""
    
    def __init__(self, model_path: Optional[str] = None, config: Optional[Dict] = None):
        """모델 초기화
        
        Args:
            model_path: ONNX 모델 파일 경로
            config: 모델 설정 딕셔너리
        """
        self.config = config or {{}}
        
        # 모델 경로 설정
        if model_path is None:
            model_path = project_root / "models" / "weights" / f"{feature_name}.onnx"
        
        self.model_path = Path(model_path)
        
        if not self.model_path.exists():
            raise FileNotFoundError(f"Model file not found: {{self.model_path}}")
        
        # ONNX 런타임 세션 생성
        self._create_session()
        
        logger.info(f"{feature_name.title().replace('_', '')}Model initialized")
    
    def _create_session(self):
        """ONNX 런타임 세션 생성"""
        try:
            # 하드웨어 환경에 따른 최적화 프로바이더 선택
            providers = ['CUDAExecutionProvider', 'CPUExecutionProvider']
            self.session = ort.InferenceSession(str(self.model_path), providers=providers)
            logger.info(f"ONNX session created with providers: {{self.session.get_providers()}}")
        except Exception as e:
            logger.error(f"Failed to create ONNX session: {{e}}")
            raise
    
    def predict(self, image: np.ndarray) -> List[Dict]:
        """이미지 추론
        
        Args:
            image: 입력 이미지 (numpy 배열)
            
        Returns:
            추론 결과 리스트
        """
        try:
            # 전처리
            input_data = self._preprocess(image)
            
            # 추론
            outputs = self.session.run(None, {{'input': input_data}})
            
            # 후처리
            results = self._postprocess(outputs)
            
            return results
            
        except Exception as e:
            logger.error(f"Prediction failed: {{e}}")
            raise
    
    def _preprocess(self, image: np.ndarray) -> np.ndarray:
        """이미지 전처리"""
        # TODO: 구현 필요
        return image
    
    def _postprocess(self, outputs: List[np.ndarray]) -> List[Dict]:
        """추론 결과 후처리"""
        # TODO: 구현 필요
        return []
'''
            elif file_name == 'run.py':
                content = f'''#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
{domain_name} {feature_name} 실시간 추론 실행 스크립트.

이 스크립트는 USB 카메라 또는 이미지 파일을 입력으로 받아 실시간 추론을 실행합니다.
"""

import os
import sys
import argparse
import logging
import cv2
import time
from pathlib import Path
from typing import Optional

# 프로젝트 루트 경로 추가
project_root = Path(__file__).parent.parent.parent
sys.path.append(str(project_root))

from common.logging import setup_logging
from common.config import load_config
from .model import {feature_name.title().replace('_', '')}Model

def get_optimal_config():
    """하드웨어 환경에 따른 최적 설정 자동 선택"""
    import platform, psutil
    system = platform.system().lower()
    cpu_count = psutil.cpu_count()
    memory_gb = psutil.virtual_memory().total // (1024**3)
    
    try:
        import torch
        gpu_available = torch.cuda.is_available()
        gpu_memory = torch.cuda.get_device_properties(0).total_memory // (1024**3) if gpu_available else 0
    except:
        gpu_available = False
        gpu_memory = 0
    
    if gpu_available and gpu_memory >= 16:
        return {{"device": "cuda", "batch_size": 16, "model_size": "large", "precision": "fp16"}}
    elif gpu_available and gpu_memory >= 4:
        return {{"device": "cuda", "batch_size": 4, "model_size": "medium", "precision": "fp16"}}
    else:
        return {{"device": "cpu", "batch_size": 1, "model_size": "small", "precision": "fp32"}}

def is_jetson():
    """Jetson 환경 감지"""
    try:
        with open("/proc/device-tree/model", "r") as f:
            return "jetson" in f.read().lower()
    except:
        return False

def create_platform_camera(camera_id=0, config=None):
    """플랫폼별 카메라 생성"""
    import platform
    system = platform.system().lower()
    
    if system == "windows":
        cap = cv2.VideoCapture(camera_id, cv2.CAP_DSHOW)
        cap.set(cv2.CAP_PROP_FOURCC, cv2.VideoWriter_fourcc('M','J','P','G'))
    elif system == "linux":
        cap = cv2.VideoCapture(camera_id, cv2.CAP_V4L2)
        if is_jetson():
            cap.set(cv2.CAP_PROP_BUFFERSIZE, 1)
    else:
        cap = cv2.VideoCapture(camera_id)
    
    return cap

def parse_args():
    """명령줄 인자 파싱"""
    parser = argparse.ArgumentParser(description="{feature_name} 실시간 추론")
    parser.add_argument("--source", type=str, default="0", help="입력 소스 (카메라 ID, 파일 경로)")
    parser.add_argument("--model", type=str, help="모델 파일 경로")
    parser.add_argument("--config", type=str, help="설정 파일 경로")
    parser.add_argument("--conf", type=float, default=0.5, help="신뢰도 임계값")
    parser.add_argument("--show", action="store_true", help="결과 화면 표시")
    parser.add_argument("--save", action="store_true", help="결과 저장")
    return parser.parse_args()

def handle_keyboard_input():
    """키보드 입력 처리"""
    key = cv2.waitKey(1) & 0xFF
    if key == ord('q'):
        return 'quit'
    elif key == ord('s'):
        return 'save_frame'
    elif key == ord('r'):
        return 'toggle_record'
    elif key == ord('p'):
        return 'toggle_pause'
    return None

def main():
    """메인 함수"""
    args = parse_args()
    
    # 로깅 설정
    setup_logging()
    logger = logging.getLogger(__name__)
    
    # 설정 로드
    config = load_config(args.config)
    
    try:
        # 하드웨어 최적화 설정
        optimal_config = get_optimal_config()
        logger.info(f"Optimal config: {{optimal_config}}")
        
        # 모델 로딩
        model = {feature_name.title().replace('_', '')}Model(args.model, config)
        
        # 입력 소스 설정
        if args.source.isdigit():
            cap = create_platform_camera(int(args.source))
        else:
            cap = cv2.VideoCapture(args.source)
        
        if not cap.isOpened():
            logger.error(f"Cannot open source: {{args.source}}")
            return
        
        # 메인 처리 루프
        while True:
            ret, frame = cap.read()
            if not ret:
                break
            
            # 추론 실행
            start_time = time.time()
            results = model.predict(frame)
            processing_time = time.time() - start_time
            
            # 결과 시각화
            if args.show:
                # TODO: 결과 시각화 구현
                cv2.imshow('Result', frame)
                
                # 키보드 입력 처리
                action = handle_keyboard_input()
                if action == 'quit':
                    break
                elif action == 'save_frame':
                    output_path = project_root / "data" / "runtime" / "output" / f"frame_{{int(time.time())}}.jpg"
                    cv2.imwrite(str(output_path), frame)
                    logger.info(f"Frame saved: {{output_path}}")
        
        cap.release()
        cv2.destroyAllWindows()
        
    except KeyboardInterrupt:
        logger.info("Interrupted by user")
    except Exception as e:
        logger.error(f"Error: {{e}}")
        raise
    finally:
        logger.info("Finished {feature_name}")

if __name__ == "__main__":
    main()
'''
            elif file_name == 'test_model.py':
                content = f'''#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
{domain_name} {feature_name} 모델 단위 테스트.

이 모듈은 {feature_name} 모델의 단위 테스트를 제공합니다.
"""

import os
import sys
import unittest
import numpy as np
from pathlib import Path

# 프로젝트 루트 경로 추가
project_root = Path(__file__).parent.parent.parent
sys.path.append(str(project_root))

from .model import {feature_name.title().replace('_', '')}Model

class Test{feature_name.title().replace('_', '')}Model(unittest.TestCase):
    """{feature_name.title().replace('_', '')}Model 테스트 클래스"""
    
    def setUp(self):
        """테스트 설정"""
        # 테스트용 더미 이미지 생성
        self.test_image = np.random.randint(0, 255, (480, 640, 3), dtype=np.uint8)
        
        # 모델 초기화 (모델 파일이 없는 경우 예외 처리)
        try:
            self.model = {feature_name.title().replace('_', '')}Model()
        except FileNotFoundError:
            self.skipTest("Model file not found")
    
    def test_model_initialization(self):
        """모델 초기화 테스트"""
        self.assertIsNotNone(self.model)
        self.assertIsNotNone(self.model.session)
    
    def test_prediction(self):
        """추론 테스트"""
        results = self.model.predict(self.test_image)
        self.assertIsInstance(results, list)
    
    def test_preprocessing(self):
        """전처리 테스트"""
        input_data = self.model._preprocess(self.test_image)
        self.assertIsInstance(input_data, np.ndarray)
    
    def test_postprocessing(self):
        """후처리 테스트"""
        # 더미 출력 생성
        dummy_outputs = [np.random.rand(1, 100, 100)]
        results = self.model._postprocess(dummy_outputs)
        self.assertIsInstance(results, list)

if __name__ == '__main__':
    unittest.main()
'''
            elif file_name == 'README.md':
                content = f'''# {domain_name.title()} - {feature_name.title()}

## 개요

이 모듈은 {domain_name} 도메인의 {feature_name} 기능을 제공합니다.

## 기능

- 실시간 {feature_name} 추론
- ONNX 모델 기반 처리
- 크로스 플랫폼 호환성

## 사용법

### 기본 실행
```bash
python run.py
```

### 카메라 지정
```bash
python run.py --source 1
```

### 이미지 파일
```bash
python run.py --source path/to/image.jpg
```

### 설정 파일 지정
```bash
python run.py --config config.yaml
```

## 파일 구조

- `model.py`: ONNX 모델 클래스
- `run.py`: 실시간 추론 실행
- `test_model.py`: 단위 테스트

## 요구사항

- Python 3.10+
- ONNX Runtime
- OpenCV
- NumPy
'''
            else:
                content = ""
            
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
    
    print(f"✓ Domain feature '{domain_name}/{feature_name}' created successfully")
    print(f"✓ Created files: {{', '.join(required_files)}}")
    print(f"✓ Location: {{domain_path}}")
```

### 다중 도메인 확장 계획 (CROSS_PLATFORM_COMPATIBILITY 호환)
```python
# 향후 도메인 확장 로드맵
DOMAIN_EXPANSION_ROADMAP = {
    'factory_defect': {
        'priority': 'high',
        'estimated_timeline': '3-4 months',
        'dependencies': ['vision_core', 'monitoring_system'],
        'features': [
            'defect_detection',      # 불량 검출
            'quality_assessment',    # 품질 평가
            'classification'         # 분류
        ],
        'requirements': {
            'hardware': ['industrial_cameras', 'lighting_system'],
            'models': ['defect_detection.onnx', 'classification.onnx'],
            'data': ['factory_samples', 'defect_annotations']
        },
        'integration_points': [
            'shared.vision_core.detection',
            'shared.vision_core.preprocessing',
            'quality_metrics_tracking'
        ]
    },
    'powerline_inspection': {
        'priority': 'medium',
        'estimated_timeline': '4-6 months',
        'dependencies': ['vision_core', 'drone_integration'],
        'features': [
            'inspection',           # 검사
            'defect_detection',     # 결함 검출
            'thermal_analysis'      # 열화상 분석
        ],
        'requirements': {
            'hardware': ['drone_cameras', 'gps_module', 'thermal_camera'],
            'models': ['powerline_detection.onnx', 'defect_classification.onnx'],
            'data': ['aerial_images', 'thermal_data', 'gps_coordinates']
        },
        'integration_points': [
            'shared.vision_core.detection',
            'shared.vision_core.tracking',
            'geolocation_services'
        ]
    },
    'medical_imaging': {
        'priority': 'low',
        'estimated_timeline': '6-8 months',
        'dependencies': ['vision_core', 'security_enhanced', 'privacy_compliance'],
        'features': [
            'anomaly_detection',    # 이상 검출
            'segmentation',         # 세그멘테이션
            'diagnosis_support'     # 진단 지원
        ],
        'requirements': {
            'hardware': ['medical_scanners', 'dicom_compatible'],
            'models': ['anomaly_detection.onnx', 'segmentation.onnx'],
            'data': ['medical_images', 'anonymized_datasets', 'expert_annotations']
        },
        'integration_points': [
            'shared.vision_core.preprocessing',
            'shared.security.gdpr_compliance',
            'medical_data_protection'
        ]
    }
}
```

## 🔗 도메인 간 통신 시스템 (CROSS_PLATFORM_COMPATIBILITY 호환)

### 이벤트 기반 통신
```python
# shared/communication/event_bus.py
from abc import ABC, abstractmethod
from typing import Dict, List, Callable, Any
import asyncio
import json
from dataclasses import dataclass
from datetime import datetime
from pathlib import Path  # CROSS_PLATFORM_COMPATIBILITY 필수

@dataclass
class DomainEvent:
    """도메인 이벤트 기본 클래스"""
    event_id: str
    domain: str
    feature: str  # CROSS_PLATFORM_COMPATIBILITY 규칙에 맞춰 feature 추가
    event_type: str
    data: Dict[str, Any]
    timestamp: datetime
    version: str = "1.0"

class EventHandler(ABC):
    """이벤트 핸들러 추상 클래스"""
    
    @abstractmethod
    async def handle(self, event: DomainEvent) -> None:
        pass

class EventBus:
    """도메인 간 이벤트 버스"""
    
    def __init__(self):
        self.handlers: Dict[str, List[EventHandler]] = {}
        self.event_store: List[DomainEvent] = []
        
        # 이벤트 로그 파일 경로 (CROSS_PLATFORM_COMPATIBILITY)
        project_root = Path(__file__).parent.parent.parent
        self.log_path = project_root / "data" / "runtime" / "logs" / "events.log"
        self.log_path.parent.mkdir(parents=True, exist_ok=True)
        
    def subscribe(self, event_type: str, handler: EventHandler):
        """이벤트 구독"""
        if event_type not in self.handlers:
            self.handlers[event_type] = []
        self.handlers[event_type].append(handler)
    
    async def publish(self, event: DomainEvent):
        """이벤트 발행"""
        # 이벤트 저장
        self.event_store.append(event)
        
        # 이벤트 로그 기록
        self._log_event(event)
        
        # 핸들러들에게 이벤트 전달
        if event.event_type in self.handlers:
            tasks = [
                handler.handle(event) 
                for handler in self.handlers[event.event_type]
            ]
            await asyncio.gather(*tasks, return_exceptions=True)
    
    def _log_event(self, event: DomainEvent):
        """이벤트 로그 기록"""
        try:
            with open(self.log_path, 'a', encoding='utf-8') as f:
                log_entry = {
                    'timestamp': event.timestamp.isoformat(),
                    'domain': event.domain,
                    'feature': event.feature,
                    'event_type': event.event_type,
                    'data': event.data
                }
                f.write(json.dumps(log_entry) + '\n')
        except Exception as e:
            print(f"Failed to log event: {e}")
    
    def get_events_by_domain(self, domain: str) -> List[DomainEvent]:
        """도메인별 이벤트 조회"""
        return [event for event in self.event_store if event.domain == domain]
    
    def get_events_by_feature(self, domain: str, feature: str) -> List[DomainEvent]:
        """도메인/기능별 이벤트 조회"""
        return [event for event in self.event_store 
                if event.domain == domain and event.feature == feature]

# 이벤트 버스 싱글톤 인스턴스
event_bus = EventBus()
```

### 도메인별 이벤트 정의 (CROSS_PLATFORM_COMPATIBILITY 호환)
```python
# 얼굴인식 도메인 이벤트
class FaceDetectedEvent(DomainEvent):
    """얼굴 감지 이벤트"""
    
    def __init__(self, face_data: Dict):
        super().__init__(
            event_id=f"face_detected_{int(time.time())}",
            domain="face_recognition",
            feature="detection",  # CROSS_PLATFORM_COMPATIBILITY 규칙
            event_type="face_detected",
            data=face_data,
            timestamp=datetime.now()
        )

class FaceRecognizedEvent(DomainEvent):
    """얼굴 인식 이벤트"""
    
    def __init__(self, recognition_data: Dict):
        super().__init__(
            event_id=f"face_recognized_{int(time.time())}",
            domain="face_recognition",
            feature="recognition",  # CROSS_PLATFORM_COMPATIBILITY 규칙
            event_type="face_recognized",
            data=recognition_data,
            timestamp=datetime.now()
        )

# 공장 불량 검출 도메인 이벤트 (향후)
class DefectDetectedEvent(DomainEvent):
    """불량 검출 이벤트"""
    
    def __init__(self, defect_data: Dict):
        super().__init__(
            event_id=f"defect_detected_{int(time.time())}",
            domain="factory_defect",
            feature="defect_detection",  # CROSS_PLATFORM_COMPATIBILITY 규칙
            event_type="defect_detected",
            data=defect_data,
            timestamp=datetime.now()
        )
```

## 🔄 공유 모듈 확장 관리

### Shared 모듈 확장 전략
```python
# shared 모듈 확장 계획
SHARED_MODULE_EXPANSION = {
    'vision_core': {
        'current_modules': [
            'detection',           # 객체/얼굴 검출
            'recognition',         # 인식
            'preprocessing',       # 전처리
            'postprocessing'       # 후처리
        ],
        'planned_modules': [
            'tracking',           # 객체 추적 (factory_defect용)
            'pose_estimation',    # 자세 추정 (powerline_inspection용)
            'thermal_analysis',   # 열화상 분석 (powerline_inspection용)
            'medical_processing'  # 의료 영상 처리 (medical_imaging용)
        ]
    },
    'communication': {
        'current_modules': [
            'event_bus',          # 이벤트 버스
            'data_manager'        # 데이터 관리
        ],
        'planned_modules': [
            'message_queue',      # 메시지 큐 (대용량 처리용)
            'real_time_sync',     # 실시간 동기화 (다중 카메라용)
            'distributed_cache'   # 분산 캐시 (확장성용)
        ]
    },
    'quality': {
        'current_modules': [],
        'planned_modules': [
            'metrics_aggregator', # 메트릭 수집기
            'quality_dashboard',  # 품질 대시보드
            'alert_system',       # 알림 시스템
            'reporting'           # 리포팅 시스템
        ]
    }
}

def extend_shared_module(module_name: str, new_component: str):
    """공유 모듈 확장"""
    
    # 1. 새로운 컴포넌트 디렉토리 생성
    component_path = f"shared/{module_name}/{new_component}"
    os.makedirs(component_path, exist_ok=True)
    
    # 2. __init__.py 파일 생성
    init_file = os.path.join(component_path, '__init__.py')
    with open(init_file, 'w') as f:
        f.write(f'"""Shared module: {module_name}.{new_component}"""\n')
    
    # 3. 기본 구현 파일 생성
    impl_file = os.path.join(component_path, f'{new_component}.py')
    with open(impl_file, 'w') as f:
        f.write(generate_component_template(module_name, new_component))
    
    # 4. 테스트 파일 생성
    test_dir = f"tests/shared/{module_name}"
    os.makedirs(test_dir, exist_ok=True)
    
    test_file = os.path.join(test_dir, f'test_{new_component}.py')
    with open(test_file, 'w') as f:
        f.write(generate_test_template(module_name, new_component))
    
    print(f"✓ Shared module component '{module_name}.{new_component}' created")

def generate_component_template(module_name: str, component_name: str) -> str:
    """컴포넌트 템플릿 생성"""
    template = f'''#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
{module_name}.{component_name} 모듈

이 모듈은 {component_name} 기능을 제공합니다.
"""

import logging
from typing import Dict, List, Optional, Any

logger = logging.getLogger(__name__)

class {component_name.title().replace('_', '')}:
    """{ component_name.replace('_', ' ').title()} 클래스"""
    
    def __init__(self):
        self.initialized = False
        self._setup()
    
    def _setup(self):
        """초기 설정"""
        logger.info(f"Initializing {{self.__class__.__name__}}")
        self.initialized = True
    
    def process(self, data: Any) -> Any:
        """메인 처리 메서드"""
        if not self.initialized:
            raise RuntimeError("Component not initialized")
        
        # 구현 필요
        raise NotImplementedError("Subclass must implement process method")

# 팩토리 함수
def create_{component_name}() -> {component_name.title().replace('_', '')}:
    """{ component_name.replace('_', ' ').title()} 인스턴스 생성"""
    return {component_name.title().replace('_', '')}()
'''
    return template
```

## 📊 다중 도메인 메트릭 관리

### 통합 메트릭 시스템
```python
# shared/quality/metrics_aggregator.py
class DomainMetricsAggregator:
    """도메인별 메트릭 통합 관리"""
    
    def __init__(self):
        self.domain_metrics = {}
        self.metric_definitions = {}
    
    def register_domain_metrics(self, domain: str, metrics_config: Dict):
        """도메인별 메트릭 등록"""
        self.domain_metrics[domain] = {
            'config': metrics_config,
            'current_values': {},
            'history': []
        }
    
    def update_metric(self, domain: str, metric_name: str, value: float):
        """메트릭 값 업데이트"""
        if domain not in self.domain_metrics:
            raise ValueError(f"Domain {domain} not registered")
        
        self.domain_metrics[domain]['current_values'][metric_name] = value
        self.domain_metrics[domain]['history'].append({
            'metric': metric_name,
            'value': value,
            'timestamp': datetime.now()
        })
    
    def get_cross_domain_summary(self) -> Dict:
        """도메인 간 메트릭 요약"""
        summary = {
            'total_domains': len(self.domain_metrics),
            'active_domains': 0,
            'overall_health': 'healthy',
            'domain_status': {}
        }
        
        for domain, metrics in self.domain_metrics.items():
            domain_health = self._calculate_domain_health(domain, metrics)
            summary['domain_status'][domain] = domain_health
            
            if domain_health['status'] == 'active':
                summary['active_domains'] += 1
        
        # 전체 시스템 건강도 계산
        if summary['active_domains'] == 0:
            summary['overall_health'] = 'inactive'
        elif any(status['health'] == 'critical' for status in summary['domain_status'].values()):
            summary['overall_health'] = 'critical'
        elif any(status['health'] == 'warning' for status in summary['domain_status'].values()):
            summary['overall_health'] = 'warning'
        
        return summary
    
    def _calculate_domain_health(self, domain: str, metrics: Dict) -> Dict:
        """도메인 건강도 계산"""
        current_values = metrics['current_values']
        config = metrics['config']
        
        health_score = 1.0
        status = 'active'
        issues = []
        
        for metric_name, thresholds in config.get('thresholds', {}).items():
            if metric_name in current_values:
                value = current_values[metric_name]
                
                if 'min' in thresholds and value < thresholds['min']:
                    health_score *= 0.7
                    issues.append(f"{metric_name} below minimum: {value} < {thresholds['min']}")
                
                if 'max' in thresholds and value > thresholds['max']:
                    health_score *= 0.7
                    issues.append(f"{metric_name} above maximum: {value} > {thresholds['max']}")
        
        # 건강도 분류
        if health_score >= 0.8:
            health = 'healthy'
        elif health_score >= 0.6:
            health = 'warning'
        else:
            health = 'critical'
        
        return {
            'status': status,
            'health': health,
            'score': health_score,
            'issues': issues,
            'metrics_count': len(current_values)
        }

# 도메인별 메트릭 설정 예시
DOMAIN_METRICS_CONFIG = {
    'face_recognition': {
        'thresholds': {
            'fps': {'min': 15.0, 'max': 60.0},
            'accuracy': {'min': 0.85, 'max': 1.0},
            'processing_time_ms': {'min': 0.0, 'max': 100.0}
        },
        'alerts': {
            'low_fps': {'condition': 'fps < 15', 'severity': 'warning'},
            'high_latency': {'condition': 'processing_time_ms > 100', 'severity': 'critical'}
        }
    },
    'factory_defect': {  # 향후
        'thresholds': {
            'defect_rate': {'min': 0.0, 'max': 0.05},
            'false_positive_rate': {'min': 0.0, 'max': 0.02},
            'throughput_per_hour': {'min': 100.0, 'max': 1000.0}
        },
        'alerts': {
            'high_defect_rate': {'condition': 'defect_rate > 0.05', 'severity': 'critical'},
            'low_throughput': {'condition': 'throughput_per_hour < 100', 'severity': 'warning'}
        }
    }
}
```

## 🔧 도메인 독립성 보장

### 의존성 검증 시스템
```python
# scripts/validation/check_domain_independence.py
def validate_domain_independence():
    """도메인 독립성 검증"""
    
    violations = []
    
    # 1. 직접 import 검증
    direct_import_violations = check_direct_domain_imports()
    violations.extend(direct_import_violations)
    
    # 2. 순환 의존성 검증
    circular_dependencies = check_circular_dependencies()
    violations.extend(circular_dependencies)
    
    # 3. 공유 모듈 사용 검증
    shared_module_violations = check_shared_module_usage()
    violations.extend(shared_module_violations)
    
    # 4. 리포트 생성
    generate_independence_report(violations)
    
    return len(violations) == 0

def check_direct_domain_imports():
    """도메인 간 직접 import 검사"""
    violations = []
    
    for domain_dir in os.listdir('domains/'):
        if not os.path.isdir(f'domains/{domain_dir}'):
            continue
        
        for py_file in Path(f'domains/{domain_dir}').rglob('*.py'):
            with open(py_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # domains.other_domain import 패턴 검사
            import_pattern = r'from\s+domains\.([^.]+)'
            matches = re.findall(import_pattern, content)
            
            for imported_domain in matches:
                if imported_domain != domain_dir:
                    violations.append({
                        'type': 'direct_domain_import',
                        'file': str(py_file),
                        'source_domain': domain_dir,
                        'target_domain': imported_domain,
                        'severity': 'critical'
                    })
    
    return violations

def check_circular_dependencies():
    """순환 의존성 검사"""
    # 간단한 순환 의존성 검사 구현
    # 실제로는 더 정교한 그래프 분석이 필요
    return []

def generate_independence_report(violations):
    """독립성 검증 리포트 생성"""
    report = {
        'timestamp': datetime.now().isoformat(),
        'total_violations': len(violations),
        'violations_by_type': {},
        'violations': violations
    }
    
    # 유형별 위반 수 집계
    for violation in violations:
        vtype = violation['type']
        if vtype not in report['violations_by_type']:
            report['violations_by_type'][vtype] = 0
        report['violations_by_type'][vtype] += 1
    
    # 리포트 저장
    with open('data/runtime/logs/domain_independence_report.json', 'w') as f:
        json.dump(report, f, indent=2)
    
    # 콘솔 출력
    if violations:
        print(f"❌ Found {len(violations)} domain independence violations")
        for violation in violations:
            print(f"  - {violation['type']}: {violation['file']}")
    else:
        print("✓ Domain independence validation passed")
```


---

**적용 시점**: factory_defect 또는 powerline_inspection 도메인 추가 시
**의존성**: `pip install asyncio dataclasses`
**설정**: 이벤트 버스, 데이터 계약, 메트릭 정의 필요


