---
description: 
globs: 
alwaysApply: false
---
# ÏûêÎèôÌôî ÎèÑÍµ¨ ÏãúÏä§ÌÖú (ADVANCED)

## üîß Ïä§ÌÅ¨Î¶ΩÌä∏ ÏûêÎèôÌôî Í∑úÏπô

### Ïä§ÌÅ¨Î¶ΩÌä∏ ÎÑ§Ïù¥Î∞ç Î∞è Î∂ÑÎ•ò
```python
SCRIPT_CATEGORIES = {
    'setup': {
        'prefix': 'setup_',
        'purpose': 'Í∞úÎ∞ú ÌôòÍ≤Ω ÏÑ§Ï†ï Î∞è Ï¥àÍ∏∞Ìôî',
        'location': 'scripts/setup/',
        'examples': ['setup_coding_tools.py', 'setup_git_hooks.py', 'setup_environment.py']
    },
    'check': {
        'prefix': 'check_',
        'purpose': 'ÏΩîÎìú ÌíàÏßà Î∞è Í∑úÏπô Í≤ÄÏ¶ù',
        'location': 'scripts/validation/',
        'examples': ['check_code_style.py', 'check_dependencies.py', 'check_security.py']
    },
    'validate': {
        'prefix': 'validate_',
        'purpose': 'Îç∞Ïù¥ÌÑ∞ Î∞è ÏÑ§Ï†ï Í≤ÄÏ¶ù',
        'location': 'scripts/validation/',
        'examples': ['validate_rules.py', 'validate_config.py', 'validate_data.py']
    },
    'generate': {
        'prefix': 'generate_',
        'purpose': 'ÌååÏùº Î∞è ÏΩîÎìú ÏÉùÏÑ±',
        'location': 'scripts/development/',
        'examples': ['generate_docs.py', 'generate_config.py', 'generate_templates.py']
    },
    'deploy': {
        'prefix': 'deploy_',
        'purpose': 'Î∞∞Ìè¨ Î∞è Î¶¥Î¶¨Ï¶à',
        'location': 'scripts/deployment/',
        'examples': ['deploy_staging.py', 'deploy_production.py', 'deploy_docs.py']
    },
    'download': {
        'prefix': 'download_',
        'purpose': 'Î™®Îç∏ Î∞è Î¶¨ÏÜåÏä§ Îã§Ïö¥Î°úÎìú',
        'location': 'scripts/development/model_management/',
        'examples': ['download_models.py', 'download_opencv_cascades.py', 'download_datasets.py']
    },
    'cleanup': {
        'prefix': 'cleanup_',
        'purpose': 'Ï†ïÎ¶¨ Î∞è ÏµúÏ†ÅÌôî',
        'location': 'scripts/maintenance/',
        'examples': ['cleanup_models.py', 'cleanup_weights.py', 'cleanup_temp_files.py']
    }
}
```

### Î™®Îç∏ Í¥ÄÎ¶¨ ÏûêÎèôÌôî
```python
# scripts/development/model_management/ Íµ¨ÌòÑ ÌëúÏ§Ä
MODEL_MANAGEMENT_TASKS = {
    'download_models': {
        'description': 'Î™®Îç∏ Í∞ÄÏ§ëÏπò ÌååÏùº Îã§Ïö¥Î°úÎìú',
        'script': 'download_models.py',
        'config_key': 'model_urls'
    },
    'download_opencv_cascades': {
        'description': 'OpenCV Haar Cascade ÌååÏùº Îã§Ïö¥Î°úÎìú',
        'script': 'download_opencv_cascades.py',
        'config_key': 'cascade_urls'
    },
    'generate_metadata': {
        'description': 'Î™®Îç∏ Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±',
        'script': 'generate_model_metadata.py',
        'config_key': 'metadata_config'
    },
    'validate_metadata': {
        'description': 'Î™®Îç∏ Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ Í≤ÄÏ¶ù',
        'script': 'validate_model_metadata.py',
        'config_key': 'validation_config'
    },
    'cleanup_models': {
        'description': 'ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÎäî Î™®Îç∏ Ï†ïÎ¶¨',
        'script': 'cleanup_models.py',
        'config_key': 'cleanup_config'
    },
    'restructure_models': {
        'description': 'Î™®Îç∏ ÎîîÎ†âÌÜ†Î¶¨ Íµ¨Ï°∞ Ïû¨Ï†ïÎ¶¨',
        'script': 'restructure_models.py',
        'config_key': 'restructure_config'
    }
}

def run_model_management_task(task_name, config_file=None):
    """Î™®Îç∏ Í¥ÄÎ¶¨ ÏûëÏóÖ Ïã§Ìñâ"""
    if task_name not in MODEL_MANAGEMENT_TASKS:
        raise ValueError(f"Unknown task: {task_name}")
    
    task_config = MODEL_MANAGEMENT_TASKS[task_name]
    script_path = f"scripts/development/model_management/{task_config['script']}"
    
    if not os.path.exists(script_path):
        raise FileNotFoundError(f"Script not found: {script_path}")
    
    # Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ
    cmd = [sys.executable, script_path]
    if config_file:
        cmd.extend(['--config', config_file])
    
    result = subprocess.run(cmd, capture_output=True, text=True)
    
    return {
        'returncode': result.returncode,
        'stdout': result.stdout,
        'stderr': result.stderr,
        'success': result.returncode == 0
    }
```

## üìä Îç∞Ïù¥ÌÑ∞ÏÖã Í¥ÄÎ¶¨ ÏûêÎèôÌôî

### Îç∞Ïù¥ÌÑ∞ÏÖã ÌååÏù¥ÌîÑÎùºÏù∏ ÏûêÎèôÌôî
```python
# scripts/development/dataset_pipeline.py Íµ¨ÌòÑ ÌëúÏ§Ä
DATASET_PIPELINE_STAGES = {
    'setup': {
        'description': 'ÎèÑÎ©îÏù∏ ÎîîÎ†âÌÜ†Î¶¨ Íµ¨Ï°∞ Î∞è ÌÅ¥ÎûòÏä§ Îßµ ÏÑ§Ï†ï',
        'function': 'setup_domain',
        'dependencies': []
    },
    'split': {
        'description': 'Îç∞Ïù¥ÌÑ∞ÏÖã Î∂ÑÌï† (train/validation/test)',
        'function': 'split_dataset',
        'dependencies': ['setup']
    },
    'augment': {
        'description': 'Îç∞Ïù¥ÌÑ∞ Ï¶ùÍ∞ï',
        'function': 'augment_dataset',
        'dependencies': ['split']
    },
    'preprocess': {
        'description': 'Îç∞Ïù¥ÌÑ∞ Ï†ÑÏ≤òÎ¶¨',
        'function': 'preprocess_dataset',
        'dependencies': ['augment']
    },
    'validate': {
        'description': 'Îç∞Ïù¥ÌÑ∞ÏÖã Í≤ÄÏ¶ù',
        'function': 'validate_dataset',
        'dependencies': ['preprocess']
    }
}

def run_dataset_pipeline(domain, config, stages=None):
    """Îç∞Ïù¥ÌÑ∞ÏÖã Ï≤òÎ¶¨ ÌååÏù¥ÌîÑÎùºÏù∏ Ïã§Ìñâ"""
    if stages is None:
        stages = list(DATASET_PIPELINE_STAGES.keys())
    
    results = {}
    
    for stage in stages:
        if stage not in DATASET_PIPELINE_STAGES:
            results[stage] = {'status': 'error', 'message': f'Unknown stage: {stage}'}
            continue
        
        stage_config = DATASET_PIPELINE_STAGES[stage]
        
        # ÏùòÏ°¥ÏÑ± ÌôïÏù∏
        for dependency in stage_config['dependencies']:
            if dependency not in results or results[dependency]['status'] != 'success':
                results[stage] = {'status': 'skipped', 'message': f'Dependency {dependency} failed'}
                continue
        
        try:
            function = globals()[stage_config['function']]
            result = function(domain, config)
            results[stage] = {'status': 'success', 'result': result}
            
        except Exception as e:
            results[stage] = {'status': 'error', 'message': str(e)}
    
    return results
```

## üîç ÏΩîÎìú ÌíàÏßà ÏûêÎèôÌôî

### ÏΩîÎìú ÏäπÍ≤© ÏûêÎèôÌôî
```python
# scripts/development/code_promotion/ Íµ¨ÌòÑ ÌëúÏ§Ä
CODE_PROMOTION_CRITERIA = {
    'reusability': {
        'description': 'Ïó¨Îü¨ Î™®ÎìàÏóêÏÑú Ïû¨ÏÇ¨Ïö© Í∞ÄÎä•ÏÑ±',
        'weight': 0.3,
        'threshold': 0.7,
        'analyzer': 'analyze_reusability'
    },
    'stability': {
        'description': 'ÏΩîÎìúÏùò ÏïàÏ†ïÏÑ± Î∞è ÌÖåÏä§Ìä∏ Ïª§Î≤ÑÎ¶¨ÏßÄ',
        'weight': 0.25,
        'threshold': 0.8,
        'analyzer': 'analyze_stability'
    },
    'generality': {
        'description': 'ÏΩîÎìúÏùò Î≤îÏö©ÏÑ±',
        'weight': 0.25,
        'threshold': 0.7,
        'analyzer': 'analyze_generality'
    },
    'duplication': {
        'description': 'ÏΩîÎìú Ï§ëÎ≥µ Ï†ïÎèÑ',
        'weight': 0.2,
        'threshold': 0.6,
        'analyzer': 'analyze_duplication'
    }
}

def analyze_promotion_candidate(file_path):
    """ÏΩîÎìú ÏäπÍ≤© ÌõÑÎ≥¥ Î∂ÑÏÑù"""
    scores = {}
    
    # Ïû¨ÏÇ¨Ïö©ÏÑ± Î∂ÑÏÑù
    scores['reusability'] = analyze_reusability(file_path)
    
    # ÏïàÏ†ïÏÑ± Î∂ÑÏÑù
    scores['stability'] = analyze_stability(file_path)
    
    # Î≤îÏö©ÏÑ± Î∂ÑÏÑù
    scores['generality'] = analyze_generality(file_path)
    
    # Ï§ëÎ≥µ Î∂ÑÏÑù
    scores['duplication'] = analyze_duplication(file_path)
    
    # Ï¥ùÏ†ê Í≥ÑÏÇ∞
    total_score = sum(
        scores[criterion] * config['weight']
        for criterion, config in CODE_PROMOTION_CRITERIA.items()
    )
    
    # ÏäπÍ≤© ÏûêÍ≤© ÌåêÏ†ï
    eligible = all(
        scores[criterion] >= config['threshold']
        for criterion, config in CODE_PROMOTION_CRITERIA.items()
    )
    
    return {
        'file_path': file_path,
        'total_score': total_score,
        'scores': scores,
        'eligible': eligible,
        'recommendation': 'promote' if eligible and total_score >= 0.7 else 'keep'
    }
```

## ü§ñ CI/CD ÌååÏù¥ÌîÑÎùºÏù∏

### GitHub Actions ÏõåÌÅ¨ÌîåÎ°úÏö∞
```yaml
# .github/workflows/vision-system-ci.yml
name: Vision System CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy bandit safety
        pip install -r requirements.txt
    
    - name: Code formatting with Black
      run: black --check .
    
    - name: Import sorting with isort
      run: isort --check-only .
    
    - name: Linting with flake8
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Type checking with mypy
      run: mypy domains/ shared/ common/
    
    - name: Security scan with bandit
      run: bandit -r domains/ shared/ common/ -f json -o bandit-report.json
    
    - name: Safety check for dependencies
      run: safety check

  test:
    runs-on: ubuntu-latest
    needs: lint-and-format
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist
    
    - name: Run tests
      run: |
        pytest tests/ --cov=domains --cov=shared --cov=common --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  validate-structure:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Validate project structure
      run: |
        python scripts/validation/validate_project_structure.py
    
    - name: Validate rules compliance
      run: |
        python scripts/validation/validate_rules.py
```

### Pre-commit ÌõÖ ÏÑ§Ï†ï
```yaml
# .pre-commit-config.yaml
repos:
  - repo: https://github.com/psf/black
    rev: 23.3.0
    hooks:
      - id: black
        language_version: python3

  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: ["--profile", "black"]

  - repo: https://github.com/pycqa/flake8
    rev: 6.0.0
    hooks:
      - id: flake8
        args: [--max-line-length=88, --extend-ignore=E203]

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.3.0
    hooks:
      - id: mypy
        additional_dependencies: [types-PyYAML, types-requests]

  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: ["-r", "domains/", "shared/", "common/"]

  - repo: local
    hooks:
      - id: validate-structure
        name: Validate Project Structure
        entry: python scripts/validation/validate_project_structure.py
        language: system
        pass_filenames: false
```

## üîß Í∞úÎ∞ú ÎèÑÍµ¨ ÏûêÎèô ÏÑ§Ï†ï

### ÏΩîÎî© ÎèÑÍµ¨ ÏÑ§Ï†ï Î∞è ÏÑ§Ïπò
```python
# scripts/setup/setup_coding_tools.py
REQUIRED_TOOLS = {
    'black': {
        'version': '23.3.0',
        'purpose': 'Python ÏΩîÎìú ÏûêÎèô Ìè¨Îß∑ÌåÖ',
        'config_file': 'pyproject.toml',
        'installation': 'pip install black==23.3.0'
    },
    'isort': {
        'version': '5.12.0',
        'purpose': 'Python import Î¨∏ ÏûêÎèô Ï†ïÎ†¨',
        'config_file': 'pyproject.toml',
        'installation': 'pip install isort==5.12.0'
    },
    'flake8': {
        'version': '6.0.0',
        'purpose': 'Python ÏΩîÎìú Î¶∞ÌåÖ',
        'config_file': '.flake8',
        'installation': 'pip install flake8==6.0.0'
    },
    'pylint': {
        'version': '2.17.0',
        'purpose': 'Python ÏΩîÎìú Ï†ïÏ†Å Î∂ÑÏÑù',
        'config_file': '.pylintrc',
        'installation': 'pip install pylint==2.17.0'
    },
    'mypy': {
        'version': '1.3.0',
        'purpose': 'Python ÌÉÄÏûÖ Ï≤¥ÌÇπ',
        'config_file': 'pyproject.toml',
        'installation': 'pip install mypy==1.3.0'
    }
}

def setup_development_tools():
    """Í∞úÎ∞ú ÎèÑÍµ¨ ÏûêÎèô ÏÑ§Ïπò Î∞è ÏÑ§Ï†ï"""
    for tool_name, tool_config in REQUIRED_TOOLS.items():
        install_tool(tool_name, tool_config)
        generate_config_file(tool_name, tool_config)

def install_tool(tool_name, tool_config):
    """ÎèÑÍµ¨ ÏÑ§Ïπò"""
    print(f"Installing {tool_name}...")
    subprocess.run(tool_config['installation'].split(), check=True)
    print(f"‚úì {tool_name} installed successfully")

def generate_config_file(tool_name, tool_config):
    """ÏÑ§Ï†ï ÌååÏùº ÏÉùÏÑ±"""
    config_file = tool_config['config_file']
    
    if tool_name == 'black' and config_file == 'pyproject.toml':
        config_content = """
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310']
include = '\\.pyi?$'
extend-exclude = '''
/(
  # directories
  \\.eggs
  | \\.git
  | \\.mypy_cache
  | \\.tox
  | \\.venv
  | build
  | dist
)/
'''
"""
    elif tool_name == 'isort' and config_file == 'pyproject.toml':
        config_content = """
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
known_first_party = ["domains", "shared", "common"]
"""
    elif tool_name == 'flake8' and config_file == '.flake8':
        config_content = """[flake8]
max-line-length = 88
extend-ignore = E203, E266, E501, W503
max-complexity = 18
select = B,C,E,F,W,T4,B9
exclude = 
    .git,
    __pycache__,
    .pytest_cache,
    .mypy_cache,
    .venv,
    build,
    dist
"""
    
    # ÏÑ§Ï†ï ÌååÏùº ÏûëÏÑ± (Í∏∞Ï°¥ ÌååÏùºÏù¥ ÏûàÏúºÎ©¥ ÏóÖÎç∞Ïù¥Ìä∏)
    if config_content:
        with open(config_file, 'w') as f:
            f.write(config_content)
        print(f"‚úì {config_file} generated for {tool_name}")
```

### Git ÌõÖ ÏûêÎèô ÏÑ§Ï†ï
```python
# scripts/setup/setup_git_hooks.py
GIT_HOOKS = {
    'pre-commit': {
        'checks': ['validate_rules', 'code_style_check', 'docstring_check'],
        'script_content': '''#!/bin/sh
# Pre-commit hook for vision system

echo "Running pre-commit checks..."

# Code style check
python scripts/validation/check_code_style.py --auto-fix
if [ $? -ne 0 ]; then
    echo "‚ùå Code style check failed"
    exit 1
fi

# Rules validation
python scripts/validation/validate_rules.py
if [ $? -ne 0 ]; then
    echo "‚ùå Rules validation failed"
    exit 1
fi

echo "‚úì All pre-commit checks passed"
exit 0
'''
    },
    'pre-push': {
        'checks': ['validate_rules', 'security_check'],
        'script_content': '''#!/bin/sh
# Pre-push hook for vision system

echo "Running pre-push checks..."

# Security check
bandit -r domains/ shared/ common/ -f json -o bandit-report.json
if [ $? -ne 0 ]; then
    echo "‚ùå Security check failed"
    exit 1
fi

# Safety check
safety check
if [ $? -ne 0 ]; then
    echo "‚ùå Dependency safety check failed"
    exit 1
fi

echo "‚úì All pre-push checks passed"
exit 0
'''
    }
}

def setup_git_hooks():
    """Git ÌõÖ ÏûêÎèô ÏÑ§Ïπò"""
    hooks_dir = ".git/hooks"
    
    if not os.path.exists(hooks_dir):
        print("Git repository not found")
        return
    
    for hook_name, hook_config in GIT_HOOKS.items():
        hook_path = os.path.join(hooks_dir, hook_name)
        
        with open(hook_path, 'w') as f:
            f.write(hook_config['script_content'])
        
        # Ïã§Ìñâ Í∂åÌïú Î∂ÄÏó¨
        os.chmod(hook_path, 0o755)
        
        print(f"‚úì {hook_name} hook installed")
```

## üìä ÏΩîÎìú ÌíàÏßà ÏûêÎèô Í≤ÄÏÇ¨

### ÏΩîÎìú Ïä§ÌÉÄÏùº ÏûêÎèô Í≤ÄÏÇ¨
```python
# scripts/validation/check_code_style.py
def check_code_style(files=None, auto_fix=False):
    """
    ÏΩîÎìú Ïä§ÌÉÄÏùº Í≤ÄÏÇ¨ Ïä§ÌÅ¨Î¶ΩÌä∏
    
    Args:
        files: Í≤ÄÏÇ¨Ìï† ÌååÏùº Î™©Î°ù (NoneÏù¥Î©¥ Ï†ÑÏ≤¥)
        auto_fix: ÏûêÎèô ÏàòÏ†ï Ïó¨Î∂Ä
    
    Returns:
        Í≤ÄÏÇ¨ Í≤∞Í≥º ÎîïÏÖîÎÑàÎ¶¨
    """
    results = {}
    
    # Black ÏΩîÎìú Ìè¨Îß∑ÌåÖ Í≤ÄÏÇ¨
    if auto_fix:
        result = subprocess.run(['black', '.'], capture_output=True, text=True)
        results['black'] = {'status': 'fixed', 'output': result.stdout}
    else:
        result = subprocess.run(['black', '--check', '.'], capture_output=True, text=True)
        results['black'] = {'passed': result.returncode == 0, 'output': result.stdout}
    
    # isort import Ï†ïÎ†¨ Í≤ÄÏÇ¨
    if auto_fix:
        result = subprocess.run(['isort', '.'], capture_output=True, text=True)
        results['isort'] = {'status': 'fixed', 'output': result.stdout}
    else:
        result = subprocess.run(['isort', '--check-only', '.'], capture_output=True, text=True)
        results['isort'] = {'passed': result.returncode == 0, 'output': result.stdout}
    
    # flake8 Î¶∞ÌåÖ Í≤ÄÏÇ¨
    result = subprocess.run(['flake8', '.'], capture_output=True, text=True)
    results['flake8'] = {'passed': result.returncode == 0, 'output': result.stdout}
    
    # mypy ÌÉÄÏûÖ Ï≤¥ÌÇπ
    result = subprocess.run(['mypy', 'domains/', 'shared/', 'common/'], capture_output=True, text=True)
    results['mypy'] = {'passed': result.returncode == 0, 'output': result.stdout}
    
    return results

def generate_style_report(results):
    """ÏΩîÎìú Ïä§ÌÉÄÏùº Í≤ÄÏÇ¨ Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±"""
    report = {
        'timestamp': datetime.now().isoformat(),
        'results': results,
        'summary': {
            'total_checks': len(results),
            'passed': sum(1 for r in results.values() if r.get('passed', False)),
            'failed': sum(1 for r in results.values() if not r.get('passed', True))
        }
    }
    
    with open('data/runtime/logs/code_style_report.json', 'w') as f:
        json.dump(report, f, indent=2)
    
    return report
```

## üîÑ ÏûêÎèô Î∞∞Ìè¨ Ïä§ÌÅ¨Î¶ΩÌä∏

### Ïä§ÌÖåÏù¥Ïßï Î∞∞Ìè¨ ÏûêÎèôÌôî
```python
# scripts/deployment/deploy_staging.py
def deploy_to_staging(version_tag=None):
    """Ïä§ÌÖåÏù¥Ïßï ÌôòÍ≤Ω Î∞∞Ìè¨"""
    
    # 1. ÏΩîÎìú ÌíàÏßà Í≤ÄÏÇ¨
    style_results = check_code_style()
    if not all(r.get('passed', False) for r in style_results.values()):
        raise Exception("Code style checks failed")
    
    # 2. ÌÖåÏä§Ìä∏ Ïã§Ìñâ
    test_result = subprocess.run(['pytest', 'tests/', '--cov=domains'], capture_output=True)
    if test_result.returncode != 0:
        raise Exception("Tests failed")
    
    # 3. Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú
    build_result = subprocess.run([
        'docker', 'build', 
        '-t', f'vision-system:staging-{version_tag or "latest"}',
        '.'
    ], capture_output=True)
    
    if build_result.returncode != 0:
        raise Exception("Docker build failed")
    
    # 4. Î∞∞Ìè¨ Ïã§Ìñâ
    deploy_result = subprocess.run([
        'docker', 'run', '-d',
        '--name', 'vision-system-staging',
        '-p', '8001:8000',
        f'vision-system:staging-{version_tag or "latest"}'
    ], capture_output=True)
    
    if deploy_result.returncode != 0:
        raise Exception("Deployment failed")
    
    print("‚úì Staging deployment completed successfully")
    return True
```


---

**Ï†ÅÏö© ÏãúÏ†ê**: ÌåÄ Í∞úÎ∞ú ÏãúÏûë Ïãú ÎòêÎäî ÏΩîÎìú ÌíàÏßà ÏûêÎèôÌôîÍ∞Ä ÌïÑÏöîÌï† Îïå
**ÏùòÏ°¥ÏÑ±**: `pip install black isort flake8 mypy bandit safety pre-commit`
**ÏÑ§Ï†ï**: GitHub Actions, pre-commit ÌõÖ, ÏΩîÎìú ÌíàÏßà ÎèÑÍµ¨ ÏÑ§Ï†ï ÌïÑÏöî


