---
description: 
globs: 
alwaysApply: true
---
# 비전 시스템 보안 규칙 (Vision System Security Rules)

이 규칙은 비전 시스템의 보안, 데이터 보호, GDPR 준수에 관한 특화 표준입니다.

## 🔒 카메라 스트림 보안

### 보안 강화 카메라 관리
```python
import ssl
import hashlib
import jwt
import cryptography
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
import base64
import os

class SecureCameraManager:
    """보안 강화 카메라 관리자"""
    
    def __init__(self, encryption_key: bytes = None):
        self.encryption_key = encryption_key or self._generate_encryption_key()
        self.cipher_suite = Fernet(self.encryption_key)
        self.ssl_context = self._create_ssl_context()
        
    def _generate_encryption_key(self) -> bytes:
        """암호화 키 생성"""
        password = os.environ.get('CAMERA_ENCRYPTION_PASSWORD', 'default_password').encode()
        salt = os.environ.get('CAMERA_ENCRYPTION_SALT', 'default_salt').encode()
        
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=salt,
            iterations=100000,
        )
        key = base64.urlsafe_b64encode(kdf.derive(password))
        return key
    
    def _create_ssl_context(self) -> ssl.SSLContext:
        """SSL 컨텍스트 생성 (RTSP over TLS)"""
        context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
        context.check_hostname = False
        context.verify_mode = ssl.CERT_NONE  # 개발 환경용
        return context
    
    def connect_secure_rtsp(self, rtsp_url: str, username: str, password: str) -> bool:
        """보안 RTSP 연결"""
        try:
            # RTSP over TLS 연결
            secure_url = rtsp_url.replace('rtsp://', 'rtsps://')
            
            # 인증 정보 암호화
            encrypted_credentials = self._encrypt_credentials(username, password)
            
            # 보안 연결 설정
            connection = self._establish_secure_connection(secure_url, encrypted_credentials)
            
            return connection is not None
            
        except Exception as e:
            logger.error(f"보안 RTSP 연결 실패: {str(e)}")
            return False
    
    def _encrypt_credentials(self, username: str, password: str) -> Dict[str, str]:
        """인증 정보 암호화"""
        encrypted_username = self.cipher_suite.encrypt(username.encode())
        encrypted_password = self.cipher_suite.encrypt(password.encode())
        
        return {
            'username': base64.b64encode(encrypted_username).decode(),
            'password': base64.b64encode(encrypted_password).decode()
        }
    
    def encrypt_frame(self, frame: np.ndarray) -> bytes:
        """프레임 데이터 암호화"""
        frame_bytes = cv2.imencode('.jpg', frame)[1].tobytes()
        encrypted_frame = self.cipher_suite.encrypt(frame_bytes)
        return encrypted_frame
    
    def decrypt_frame(self, encrypted_frame: bytes) -> np.ndarray:
        """프레임 데이터 복호화"""
        decrypted_bytes = self.cipher_suite.decrypt(encrypted_frame)
        frame_array = np.frombuffer(decrypted_bytes, dtype=np.uint8)
        frame = cv2.imdecode(frame_array, cv2.IMREAD_COLOR)
        return frame
```

## 👤 얼굴 인식 데이터 보호 (GDPR 준수)

### 데이터 익명화 및 보존 정책
```python
class FaceDataProtection:
    """얼굴 인식 데이터 보호 (GDPR 준수)"""
    
    def __init__(self):
        self.anonymization_enabled = True
        self.retention_policy = {
            'face_embeddings': 30,  # 30일
            'raw_images': 7,        # 7일
            'detection_logs': 90    # 90일
        }
        self.consent_manager = ConsentManager()
    
    def anonymize_face_data(self, face_data: Dict) -> Dict:
        """얼굴 데이터 익명화"""
        if not self.anonymization_enabled:
            return face_data
        
        anonymized_data = face_data.copy()
        
        # 개인 식별 정보 제거
        anonymized_data.pop('person_id', None)
        anonymized_data.pop('person_name', None)
        
        # 얼굴 임베딩 해싱
        if 'embedding' in anonymized_data:
            embedding_hash = hashlib.sha256(
                str(anonymized_data['embedding']).encode()
            ).hexdigest()
            anonymized_data['embedding_hash'] = embedding_hash
            del anonymized_data['embedding']
        
        # 타임스탬프 일반화 (시간 단위로)
        if 'timestamp' in anonymized_data:
            timestamp = anonymized_data['timestamp']
            anonymized_data['timestamp'] = int(timestamp // 3600) * 3600
        
        return anonymized_data
    
    def apply_retention_policy(self):
        """데이터 보존 정책 적용"""
        current_time = time.time()
        
        for data_type, retention_days in self.retention_policy.items():
            cutoff_time = current_time - (retention_days * 24 * 3600)
            self._delete_old_data(data_type, cutoff_time)
    
    def _delete_old_data(self, data_type: str, cutoff_time: float):
        """오래된 데이터 자동 삭제"""
        data_dir = f"data/{data_type}"
        if not os.path.exists(data_dir):
            return
        
        deleted_count = 0
        for filename in os.listdir(data_dir):
            file_path = os.path.join(data_dir, filename)
            if os.path.getctime(file_path) < cutoff_time:
                os.remove(file_path)
                deleted_count += 1
        
        logger.info(f"{data_type}: {deleted_count}개 파일 삭제됨 (보존 정책)")

class ConsentManager:
    """사용자 동의 관리"""
    
    def __init__(self):
        self.consent_db = {}  # 실제로는 데이터베이스 사용
        
    def check_consent(self, person_id: str, purpose: str) -> bool:
        """사용자 동의 확인"""
        consent_key = f"{person_id}_{purpose}"
        return self.consent_db.get(consent_key, False)
    
    def record_consent(self, person_id: str, purpose: str, granted: bool):
        """사용자 동의 기록"""
        consent_key = f"{person_id}_{purpose}"
        self.consent_db[consent_key] = {
            'granted': granted,
            'timestamp': time.time(),
            'purpose': purpose
        }
```

## 🔐 모델 보안 관리

### 모델 가중치 암호화 및 디지털 서명
```python
class ModelSecurityManager:
    """모델 보안 관리"""
    
    def __init__(self):
        self.model_signatures = {}
        
    def sign_model(self, model_path: str, private_key_path: str) -> str:
        """모델 파일 디지털 서명"""
        from cryptography.hazmat.primitives import serialization
        from cryptography.hazmat.primitives.asymmetric import rsa, padding
        
        # 모델 파일 해시 계산
        model_hash = self._calculate_file_hash(model_path)
        
        # 개인키 로드
        with open(private_key_path, 'rb') as f:
            private_key = serialization.load_pem_private_key(
                f.read(), password=None
            )
        
        # 디지털 서명 생성
        signature = private_key.sign(
            model_hash.encode(),
            padding.PSS(
                mgf=padding.MGF1(hashes.SHA256()),
                salt_length=padding.PSS.MAX_LENGTH
            ),
            hashes.SHA256()
        )
        
        signature_b64 = base64.b64encode(signature).decode()
        self.model_signatures[model_path] = signature_b64
        
        return signature_b64
    
    def verify_model(self, model_path: str, public_key_path: str, signature: str) -> bool:
        """모델 파일 서명 검증"""
        from cryptography.hazmat.primitives import serialization
        from cryptography.hazmat.primitives.asymmetric import padding
        
        try:
            # 모델 파일 해시 계산
            model_hash = self._calculate_file_hash(model_path)
            
            # 공개키 로드
            with open(public_key_path, 'rb') as f:
                public_key = serialization.load_pem_public_key(f.read())
            
            # 서명 검증
            signature_bytes = base64.b64decode(signature)
            public_key.verify(
                signature_bytes,
                model_hash.encode(),
                padding.PSS(
                    mgf=padding.MGF1(hashes.SHA256()),
                    salt_length=padding.PSS.MAX_LENGTH
                ),
                hashes.SHA256()
            )
            
            return True
            
        except Exception as e:
            logger.error(f"모델 서명 검증 실패: {str(e)}")
            return False
    
    def _calculate_file_hash(self, file_path: str) -> str:
        """파일 SHA256 해시 계산"""
        sha256_hash = hashlib.sha256()
        with open(file_path, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                sha256_hash.update(chunk)
        return sha256_hash.hexdigest()
    
    def encrypt_model(self, model_path: str, password: str) -> str:
        """모델 파일 암호화"""
        # 암호화 키 생성
        salt = os.urandom(16)
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=salt,
            iterations=100000,
        )
        key = base64.urlsafe_b64encode(kdf.derive(password.encode()))
        cipher_suite = Fernet(key)
        
        # 모델 파일 읽기 및 암호화
        with open(model_path, 'rb') as f:
            model_data = f.read()
        
        encrypted_data = cipher_suite.encrypt(model_data)
        
        # 암호화된 파일 저장
        encrypted_path = f"{model_path}.encrypted"
        with open(encrypted_path, 'wb') as f:
            f.write(salt + encrypted_data)  # salt를 앞에 붙여서 저장
        
        return encrypted_path
    
    def decrypt_model(self, encrypted_path: str, password: str) -> str:
        """모델 파일 복호화"""
        with open(encrypted_path, 'rb') as f:
            data = f.read()
        
        # salt 추출
        salt = data[:16]
        encrypted_data = data[16:]
        
        # 키 재생성
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=salt,
            iterations=100000,
        )
        key = base64.urlsafe_b64encode(kdf.derive(password.encode()))
        cipher_suite = Fernet(key)
        
        # 복호화
        decrypted_data = cipher_suite.decrypt(encrypted_data)
        
        # 복호화된 파일 저장
        decrypted_path = encrypted_path.replace('.encrypted', '')
        with open(decrypted_path, 'wb') as f:
            f.write(decrypted_data)
        
        return decrypted_path
```

## 🛡️ API 보안 관리

### JWT 인증 및 API 요청 제한
```python
class APISecurityManager:
    """API 보안 관리"""
    
    def __init__(self, secret_key: str):
        self.secret_key = secret_key
        self.rate_limits = {
            'default': {'requests': 100, 'window': 3600},  # 시간당 100회
            'admin': {'requests': 1000, 'window': 3600}    # 시간당 1000회
        }
        self.request_counts = {}
        self.blacklisted_ips = set()
    
    def generate_jwt_token(self, user_id: str, role: str = 'user') -> str:
        """JWT 토큰 생성"""
        payload = {
            'user_id': user_id,
            'role': role,
            'exp': time.time() + 3600,  # 1시간 후 만료
            'iat': time.time()
        }
        
        token = jwt.encode(payload, self.secret_key, algorithm='HS256')
        return token
    
    def verify_jwt_token(self, token: str) -> Dict:
        """JWT 토큰 검증"""
        try:
            payload = jwt.decode(token, self.secret_key, algorithms=['HS256'])
            return payload
        except jwt.ExpiredSignatureError:
            raise ValueError("토큰이 만료됨")
        except jwt.InvalidTokenError:
            raise ValueError("유효하지 않은 토큰")
    
    def check_rate_limit(self, user_id: str, endpoint: str) -> bool:
        """API 요청 제한 확인"""
        current_time = time.time()
        key = f"{user_id}_{endpoint}"
        
        if key not in self.request_counts:
            self.request_counts[key] = []
        
        # 윈도우 밖의 요청 제거
        window_size = self.rate_limits['default']['window']
        self.request_counts[key] = [
            req_time for req_time in self.request_counts[key]
            if current_time - req_time < window_size
        ]
        
        # 현재 요청 추가
        self.request_counts[key].append(current_time)
        
        # 제한 확인
        max_requests = self.rate_limits['default']['requests']
        return len(self.request_counts[key]) <= max_requests
    
    def add_to_blacklist(self, ip_address: str):
        """IP 주소를 블랙리스트에 추가"""
        self.blacklisted_ips.add(ip_address)
        logger.warning(f"IP {ip_address}가 블랙리스트에 추가됨")
    
    def is_blacklisted(self, ip_address: str) -> bool:
        """IP 주소가 블랙리스트에 있는지 확인"""
        return ip_address in self.blacklisted_ips
```

## 🎭 민감정보 마스킹 및 익명화

### 데이터 마스킹 필터
```python
class DataMaskingFilter:
    """민감정보 마스킹 필터"""
    
    def __init__(self):
        self.patterns = {
            'credit_card': r'\b\d{4}[-\s]?\d{4}[-\s]?\d{4}[-\s]?\d{4}\b',
            'phone': r'\b\d{3}[-.]?\d{3}[-.]?\d{4}\b',
            'email': r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b',
            'ssn': r'\b\d{3}-\d{2}-\d{4}\b',
            'ip_address': r'\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b'
        }
    
    def mask_sensitive_data(self, text: str) -> str:
        """민감정보 마스킹"""
        import re
        
        masked_text = text
        
        for data_type, pattern in self.patterns.items():
            def mask_match(match):
                matched_text = match.group(0)
                if data_type == 'email':
                    # 이메일은 도메인만 보존
                    parts = matched_text.split('@')
                    return f"***@{parts[1]}"
                elif data_type == 'credit_card':
                    # 카드번호는 마지막 4자리만 보존
                    return f"****-****-****-{matched_text[-4:]}"
                else:
                    # 기타는 완전 마스킹
                    return '*' * len(matched_text)
            
            masked_text = re.sub(pattern, mask_match, masked_text)
        
        return masked_text
    
    def blur_faces(self, image: np.ndarray, blur_strength: int = 15) -> np.ndarray:
        """이미지에서 얼굴 블러 처리"""
        faces = self._detect_faces_in_image(image)
        blurred_image = image.copy()
        
        for face in faces:
            x, y, w, h = face['bbox']
            # 얼굴 영역 블러 처리
            face_region = blurred_image[y:y+h, x:x+w]
            blurred_face = cv2.GaussianBlur(face_region, (blur_strength, blur_strength), 0)
            blurred_image[y:y+h, x:x+w] = blurred_face
        
        return blurred_image
    
    def _detect_faces_in_image(self, image: np.ndarray) -> List[Dict]:
        """이미지에서 얼굴 감지 및 위치 반환"""
        # 실제 얼굴 감지 구현 필요
        return []
```

## 🌐 네트워크 보안 설정

### 보안 헤더 및 CORS 설정
```python
class NetworkSecurityConfig:
    """네트워크 보안 설정"""
    
    SECURITY_HEADERS = {
        'X-Content-Type-Options': 'nosniff',
        'X-Frame-Options': 'DENY',
        'X-XSS-Protection': '1; mode=block',
        'Strict-Transport-Security': 'max-age=31536000; includeSubDomains',
        'Content-Security-Policy': "default-src 'self'",
        'Referrer-Policy': 'strict-origin-when-cross-origin'
    }
    
    ALLOWED_ORIGINS = [
        'https://localhost:8000',
        'https://vision-system.company.com'
    ]
    
    CORS_CONFIG = {
        'allow_origins': ALLOWED_ORIGINS,
        'allow_credentials': True,
        'allow_methods': ['GET', 'POST'],
        'allow_headers': ['Authorization', 'Content-Type']
    }
    
    FIREWALL_RULES = {
        'incoming': {
            'allow': [
                {'port': 8000, 'protocol': 'https', 'source': 'internal'},
                {'port': 554, 'protocol': 'rtsp', 'source': 'camera_network'}
            ],
            'deny': [
                {'port': 22, 'protocol': 'ssh', 'source': 'external'},
                {'port': 3389, 'protocol': 'rdp', 'source': 'external'}
            ]
        }
    }

class SecurityAuditLogger:
    """보안 감사 로깅"""
    
    def __init__(self):
        self.audit_logger = self._setup_audit_logger()
    
    def _setup_audit_logger(self):
        """감사 로그 설정"""
        audit_logger = logging.getLogger('security_audit')
        audit_logger.setLevel(logging.INFO)
        
        # 감사 로그는 별도 파일에 저장
        handler = logging.FileHandler('logs/security_audit.log')
        formatter = logging.Formatter(
            '%(asctime)s - %(levelname)s - %(message)s'
        )
        handler.setFormatter(formatter)
        audit_logger.addHandler(handler)
        
        return audit_logger
    
    def log_authentication_attempt(self, user_id: str, success: bool, ip_address: str):
        """인증 시도 로깅"""
        status = "SUCCESS" if success else "FAILED"
        self.audit_logger.info(
            f"AUTH_{status}: user={user_id}, ip={ip_address}"
        )
    
    def log_data_access(self, user_id: str, resource: str, action: str):
        """데이터 접근 로깅"""
        self.audit_logger.info(
            f"DATA_ACCESS: user={user_id}, resource={resource}, action={action}"
        )
    
    def log_security_event(self, event_type: str, details: Dict):
        """보안 이벤트 로깅"""
        self.audit_logger.warning(
            f"SECURITY_EVENT: type={event_type}, details={details}"
        )
```

## ✅ 보안 체크리스트

### 필수 보안 설정 검증
```python
SECURITY_CHECKLIST = {
    'encryption': {
        'camera_streams': True,      # 카메라 스트림 암호화
        'model_files': True,         # 모델 파일 암호화
        'api_communications': True,  # API 통신 암호화
        'data_at_rest': True        # 저장 데이터 암호화
    },
    'authentication': {
        'jwt_tokens': True,         # JWT 토큰 인증
        'api_keys': True,           # API 키 인증
        'user_sessions': True,      # 사용자 세션 관리
        'service_accounts': True    # 서비스 계정 인증
    },
    'authorization': {
        'role_based_access': True,  # 역할 기반 접근 제어
        'resource_permissions': True, # 리소스 권한 관리
        'api_rate_limiting': True,  # API 요청 제한
        'audit_logging': True       # 감사 로깅
    },
    'data_protection': {
        'face_data_anonymization': True, # 얼굴 데이터 익명화
        'gdpr_compliance': True,         # GDPR 준수
        'retention_policies': True,      # 데이터 보존 정책
        'consent_management': True       # 동의 관리
    },
    'network_security': {
        'https_only': True,         # HTTPS 전용
        'cors_configuration': True, # CORS 설정
        'security_headers': True,   # 보안 헤더
        'firewall_rules': True      # 방화벽 규칙
    }
}

def validate_security_configuration() -> Dict[str, bool]:
    """보안 설정 검증"""
    results = {}
    
    for category, checks in SECURITY_CHECKLIST.items():
        category_results = {}
        for check_name, required in checks.items():
            # 실제 검증 로직 구현 필요
            category_results[check_name] = required  # 임시
        results[category] = category_results
    
    return results
```

이 보안 규칙들을 적용하면 비전 시스템의 데이터 보호, 암호화, 인증/인가, GDPR 준수 등이 체계적으로 관리됩니다.

