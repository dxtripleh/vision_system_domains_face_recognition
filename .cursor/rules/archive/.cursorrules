# Vision System Development Rules
# 업데이트: 2025-06-28
# 버전: v1.0.0

## 📋 규칙 적용 우선순위 및 범위

### 🚨 1. 필수 규칙 (MANDATORY - 모든 개발에 적용)
```
Priority 1: 01-universal/common-development-rules.mdc
- 적용 범위: ALL_FILES
- 설명: Python 개발 표준, 코딩 스타일, 패키지 관리
- 위반 시: 코드 리뷰 거부

Priority 2: 01-universal/project-structure-rules.mdc  
- 적용 범위: PROJECT_STRUCTURE
- 설명: 폴더 구조, 네이밍 규칙, 모듈화 전략
- 위반 시: 구조 재설계 필요
```

### ⚡ 2. 비전 시스템 특화 규칙 (VISION_MANDATORY)
```
Priority 3: 02-vision-specific/vision-system-specific-rules.mdc
- 적용 범위: VISION_FEATURES
- 설명: 비전 시스템 특화 개발 표준
- 조건: 비전 시스템 개발 시 필수

Priority 4: 02-vision-specific/vision-system-security-rules.mdc
- 적용 범위: FACE_RECOGNITION, GDPR_COMPLIANCE
- 설명: 생체정보 보안, 데이터 보호
- 조건: 얼굴인식 개발 시 필수
```

### 🔧 3. 성능 및 최적화 규칙 (PERFORMANCE_CRITICAL)
```
Priority 5: 01-universal/hardware-requirements-rules.mdc
- 적용 범위: PERFORMANCE_OPTIMIZATION
- 설명: GPU/CPU 최적화, 메모리 관리
- 조건: 실시간 처리 필요 시 적용

Priority 6: 02-vision-specific/vision-system-monitoring-rules.mdc
- 적용 범위: PRODUCTION_MONITORING
- 설명: 성능 모니터링, 실시간 대시보드
- 조건: 프로덕션 환경 배포 시 적용
```

### 📚 4. 개발 지원 규칙 (DEVELOPMENT_SUPPORT)
```
Priority 7: 01-universal/clean-slate-architecture-strategy.mdc
- 적용 범위: ARCHITECTURE_DESIGN
- 설명: 현대적 아키텍처 설계 원칙
- 조건: 새 프로젝트 시작 시 참조

Priority 8: 01-universal/pre-development-checklist.mdc
- 적용 범위: PROJECT_INITIALIZATION  
- 설명: 7단계 개발 준비 가이드
- 조건: 새 도메인 개발 시작 전 필수

Priority 9: 01-universal/common-folder-management-strategy.mdc
- 적용 범위: FOLDER_ORGANIZATION
- 설명: 확장 가능한 폴더 구조 관리
- 조건: 프로젝트 구조 설계 시 참조
```

### 🚀 5. 자동화 및 배포 규칙 (AUTOMATION_OPTIONAL)
```
Priority 10: 01-universal/automation-tools-rules.mdc
- 적용 범위: CI_CD_AUTOMATION
- 설명: 개발 도구, 테스트 자동화
- 조건: CI/CD 파이프라인 구축 시 적용

Priority 11: 01-universal/deployment-automation-rules.mdc
- 적용 범위: DEPLOYMENT_PIPELINE
- 설명: 컨테이너화, 배포 전략
- 조건: 프로덕션 배포 시 적용

Priority 12: 01-universal/documentation-system-rules.mdc
- 적용 범위: DOCUMENTATION
- 설명: 문서 작성 표준, 자동화 도구
- 조건: 문서화 필요 시 적용
```

### 🔍 6. 분석 및 참조 규칙 (REFERENCE_ONLY)
```
Priority 13: 03-project-analysis/legacy-code-analysis-rules.mdc
- 적용 범위: CODE_ANALYSIS
- 설명: 코드 복잡도 분석, 리팩토링 가이드
- 조건: 기존 코드 분석 시 참조

Priority 14: 03-project-analysis/common-config-complete-analysis.mdc
- 적용 범위: CONFIG_MANAGEMENT
- 설명: 설정 파일 구조, 환경별 관리
- 조건: 설정 관리 최적화 시 참조
```

## 🎯 현재 개발 상태 (2025-06-28)

### 📋 **활성 프로젝트**: 비전 시스템 객체인식 개발
```
🎯 최종 목표: 독립적 3개 도메인 완성
├── 🧑 얼굴인식 도메인 (Face Recognition Domain) ← 현재 개발 중
│   ├── Face Detection (얼굴 검출) ← 다음 구현 대상
│   └── Face Recognition (얼굴 인식)
├── 🏭 공장불량인식 도메인 (Factory Defect Recognition Domain)
│   ├── Defect Detection (불량 검출)
│   └── Defect Classification (불량 분류)
└── ⚡ 전선불량인식 도메인 (Powerline Defect Recognition Domain)
    ├── Component Detection (구성요소 검출)
    ├── Defect Detection (불량 검출)
    └── Defect Classification (불량 분류)
```

### 📅 **현재 개발 단계**: Phase 1 - 얼굴인식 도메인 (0-6개월)
```
Phase 1.1: Face Detection Implementation (Month 1-2) ← 현재 위치
├── MediaPipe 기반 얼굴 검출
├── OpenCV 기반 얼굴 검출  
├── MTCNN 기반 얼굴 검출
└── 성능 최적화 및 비교 분석

Phase 1.2: Face Recognition Implementation (Month 2-4)
├── FaceNet 기반 얼굴 인식
├── ArcFace 기반 얼굴 인식
├── 얼굴 DB 관리 시스템
└── GDPR 준수 개인정보 보호
```

### 🔥 **즉시 적용 필수 규칙** (현재 개발 단계)
1. ✅ `common-development-rules.mdc` - Python 개발 표준
2. ✅ `project-structure-rules.mdc` - 프로젝트 구조 표준
3. ✅ `vision-system-specific-rules.mdc` - 비전 시스템 특화 규칙
4. ✅ `vision-system-security-rules.mdc` - 생체정보 보안 (얼굴인식 필수)
5. ⚠️ `hardware-requirements-rules.mdc` - 실시간 처리 최적화

### 🎯 **다음 단계 준비 규칙**
- `vision-system-monitoring-rules.mdc` - 성능 모니터링 (Phase 1.2에서 적용)
- `deployment-automation-rules.mdc` - 배포 자동화 (Phase 1 완료 후 적용)

### 🚫 **현재 미적용 규칙**
- `automation-tools-rules.mdc` - CI/CD 구축 후 적용 예정
- `documentation-system-rules.mdc` - 문서화 단계에서 적용 예정
- `legacy-code-analysis-rules.mdc` - 기존 코드 없음으로 현재 불필요

## 🔧 개발 환경 설정

### **필수 환경 변수**
```bash
VISION_ENVIRONMENT=development
VISION_DOMAIN=face_recognition
VISION_STAGE=detection_implementation
USE_SIMULATION=False  # 시뮬레이션 금지
```

### **현재 기술 스택**
```yaml
Language: Python 3.9+
Vision: OpenCV, MediaPipe
ML: PyTorch, TensorFlow
Security: cryptography, GDPR 준수
Monitoring: Prometheus, Grafana (예정)
```

### **개발 우선순위**
1. 🥇 얼굴 검출 기능 구현 (MediaPipe)
2. 🥈 성능 최적화 및 벤치마킹
3. 🥉 보안 및 개인정보 보호 구현
4. 📊 모니터링 시스템 구축

---
**마지막 업데이트**: 2025-06-28  
**다음 검토 예정**: 2025-07-28  
**담당자**: Vision System Development Team 